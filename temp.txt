pink (Pk)
red (R)
orange (O)
 brown (Br)
 yellow (Y)
 olive (Ol)
 yellow green (YG)
 green (G)
 blue (B)
 purple (P)
 white (Wh)
 gray (Gy)
 black (Bk)

 reddish orange (rO)
 orange yellow (OY)
 greenish yellow (gY)
 yellowish green (yG)
 bluish green (bG)
 greenish blue (gB)
  purplish blue (pB)
  violet (V)
  reddish purple (rP)
  purplish red (pR)
  purplish pink (pPk)
  yellowish pink (yPk)
  reddish brown (rBr)
  yellowish brown (yBr)
  olive brown (OlBr)
  olive green (OlGr)

	# Classifiers
	# Level 1
	def isPink(abbrev):
		if "Pk" in name:
			return "Pink"
	def isRed(abbrev):
		if "R" in name:
			return "Red"
	def isOrange(abbrev):
		if "O" in name:
			return "Orange"
	def isBrown(abbrev):
		if "Br" in name:
			return "Brown"
	def isYellow(abbrev):
		if "Y" in name:
			return "Yellow"
	def isOlive(abbrev):
		if "Ol" in name:
			return "Olive"
	def isYellowGreen(abbrev):
		if "YG" in name:
			return "Yellow Green"
	def isGreen(abbrev):
		if "G" in name:
			return "Green"
	def isBlue(abbrev):
		if "B" in name:
			return "Blue"
	def isPurple(abbrev):
		if "P" in name:
			return "Purple"
	def isWhite(abbrev):
		if "Wh" in name:
			return "White"
	def isGray(abbrev):
		if "Gy" in name:
			return "Gray"
	def isBlack(abbrev):
		if "Bk" in name:
			return "Black"

	# Level 2
	def isReddishOrange(abbrev):
		if "rO" in name:
			return "Reddish Orange"
	def isOrangeYellow(abbrev):
		if "OY" in name:
			return "Orange Yellow"
	def isGreenishYellow(abbrev):
		if "gY" in name:
			return "Greenish Yellow"
	def isYellowishGreen(abbrev):
		if "yG" in name:
			return "Yellowish Green"
	def isBluishGreen(abbrev):
		if "bG" in name:
			return "Bluish Green"
	def isGreenishBlue(abbrev):
		if "gB" in name:
			return "Greenish Blue"
	def isPurplishBlue(abbrev):
		if "pB" in name:
			return "Purplish Blue"
	def isViolet(abbrev):
		if "V" in name:
			return "Violet"
	def isReddishPurple(abbrev):
		if "rP" in name:
			return "Reddish Purple"
	def isPurplishRed(abbrev):
		if "pR" in name:
			return "Purplish Red"
	def isPurplishPink(abbrev):
		if "pPk" in name:
			return "Purplish Pink"
	def isYellowishPink(abbrev):
		if "yPk" in name:
			return "Yellowish Pink"
	def isReddishBrown(abbrev):
		if "rBr" in name:
			return "Reddish Brown"
	def isYellowishBrown(abbrev):
		if "yBr" in name:
			return "Yellowish Brown"
	def isOliveBrown(abbrev):
		if "OlBr" in name:
			return "Olive Brown"
	def isOliveGreen(abbrev):
		if "OlGr" in name:
			return "Olive Green"

	# Level 3

	def isVivid(abbrev):
		if "v." in abbrev:
			return "Vivid"
	def isBrilliant(abbrev):
		if "brill." in abbrev:
			return "Brilliant"
	def isStrong(abbrev):
		if "s." in abbrev:
			return "Strong"
	def isVeryDeep(abbrev):
		if "v. deep" in abbrev:
			return "Very Deep"
	def isVeryLight(abbrev):
		if "v.l." in abbrev:
			return "Very Light"
	def isLight(abbrev):
		if "l." in abbrev:
			return "Light"
	def isModerate(abbrev):
		if "m." in abbrev:
			return "Moderate"
	def isDark(abbrev):
		if "d." in abbrev:
			return "Dark"
	def isVeryDark(abbrev):
		if "v.d." in abbrev:
			return "Very Dark"
	def isVeryPale(abbrev):
		if "v.p." in abbrev:
			return "Very Pale"
	def isGrayish(abbrev):
		if "gy." in abbrev:
			return "Grayish"
	def isDarkGrayish(abbrev):
		if "d. gy." in abbrev:
			return "Dark Grayish"
	def isBlackish(abbrev):
		if "bk." in abbrev:
			return "Blackish"

					# self.centroid = tuple()
		# self.munsellMap = scd.createMap("munsell",extras=True)
		# Levels 1 and 2, base and intermediate colors
		self.lvl12 = {
			"Pk": "Pink",
			"R": "Red",
			"O": "Orange",
			"Br": "Brown",
			"Y": "Yellow",
			"Ol": "Olive",
			"YG": "Yellow Green",
			"G": "Green",
			"B": "Blue",
			"P": "Purple",
			"Wh": "White",
			"Gy": "Gray",
			"Bk": "Black",
			"rO":"Reddish Orange",
			"OY":"Orange Yellow",
			"gY":"Greenish Yellow",
			"yG":"Yellowish Green",
			"bG":"Bluish Green",
			"gB":"Greenish Blue",
			"pB":"Purplish Blue",
			"V":"Violet",
			"rP":"Reddish Purple",
			"pR":"Purplish Red",
			"pPk":"Purplish Pink",
			"yPk":"Yellowish Pink",
			"rBr":"Reddish Brown",
			"yBr":"Yellowish Brown",
			"OlBr":"Olive Brown",
			"OlGr":"Olive Green"
			}
		# Level 3, descriptors
		self.lvl3 = {
			"v.": "Vivid",
			"brill.": "Brilliant",
			"s.": "Strong",
			"v. deep": "Very Deep",
			"v.l": "Very Light",
			"l.": "Light",
			"m.": "Moderate",
			"d.": "Dark",
			"v.d.": "Very Dark",
			"v.p": "Very Pale",
			"p.": "Pale",
			"l.gy.": "Light Grayish",
			"gy.": "Grayish",
			"d.gy.": "Dark Grayish",
			"bk.": "Blackish"
			# "-ish Wh": "-ish White",
			# "l. -ish Gy": "Light -ish Gray",
			# "-ish Gy": "-ish Gray",
			# "d. -ish Gy": "Dark -ish Gray",
			# "-ish Bk": "-ish Black"
			}

import scd
import re

class MunsellColor:
	def __init__(self):


	def expand(self, abbrev):
		match = re.search('([a-z\.]+)\.([a-zA-Z]+) ([0-9]+) ([a-zA-Z ]+)', abbrev)
		if match:
			print self.lvl3[match.groups()[0]], self.lvl12[match.groups()[1]], match.groups()[2]


if __name__ == "__main__":  
	mc = MunsellColor()
	mc.expand("d.rGy 23 Dark Reddish Gray")
